
{package}
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.zkoss.zul.ListModelList;
import org.zkoss.zul.Messagebox;
import pmcg.framework.ui.WindowCrud;
import pmcg.framework.util.WinUtils;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.Executions;
import model.exceptions.DaoException;
{imports}
public class {obj.nome}cad extends WindowCrud {
	{declare}
	
	Boolean abertoPeloMenu = Boolean.TRUE;

	public {obj.nome}cad() {
		super("{obj.nomeminus}cad.zul");
		Map<String, String> map = Executions.getCurrent().getArg();
		if (map.get("pageName") != null) {
			abertoPeloMenu = Boolean.FALSE;
		}
	}

	public void initComponentes() {
		{initcomponente}
		this.getCrdBar().getBotao(1).setDisabled(true);
		this.getCrdBar().getBotao(2).setDisabled(true);
		this.vincular();
	}

	@Override
	public void incluir() {
		try {
			if (this.validarForm() && this.trataVO()
					&& !this.getCrdBar().getBotao(0).isDisabled()) {
				{incluir}
			}
		} catch (Exception e) {
			try {
				Messagebox.show("O registro não pode ser incluído: "
						+ e.getMessage(), "Erro:", Messagebox.OK,
						Messagebox.ERROR);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
	}

	@Override
	public void salvar() {
		try {
			if (this.validarForm() && this.trataVO()
					&& this.{obj.nomecompleteuncaptalize}.get{obj.idcaptalize}() != null
					&& !this.getCrdBar().getBotao(1).isDisabled()) {
				{salvar}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		this.limpar();
	}

	@Override
	public void apagar() {
		
		try {
			if (Messagebox.show("Deseja realmente excluir ?", "Aviso!!!",
					Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) == Messagebox.YES) {
				{apagar}
			}
			
		} catch (InterruptedException e) {
			try {
				Messagebox.show("Registro não pode ser excluído!");
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
	}

	@Override
	public void limpar() {
		{limpar}
		
		this.getCrdBar().getBotao(0).setDisabled(false);
		this.getCrdBar().getBotao(1).setDisabled(true);
		this.getCrdBar().getBotao(2).setDisabled(true);
		this.vincular();
	}

	@Override
	public void pesquisar() {
		
		Map<String, String> param = new HashMap<String, String>();
		new WinUtils().abrirLis("/forms/{obj.nomeminus}lis.zul", param, this,
				"ret{obj.nomecompleto}");
	}

	public void ret{obj.nomecompleto}(Object ret) {
		if (ret != null) {
			this.{obj.nomecompleteuncaptalize} = ({obj.nomecompleto}) ret;
			{retorno}
			this.getCrdBar().getBotao(0).setDisabled(true);
			this.getCrdBar().getBotao(1).setDisabled(false);
			this.getCrdBar().getBotao(2).setDisabled(false);
			this.vincular();
		}
	}

	@Override
	public void imprimir() {
	}

	public boolean trataVO() {
		if (this.{obj.nomecompleteuncaptalize} != null) {
			//this.{obj.nomecompleteuncaptalize}.setUsualt(this.getLogin());
			//this.{obj.nomecompleteuncaptalize}.setDatalt(WinUtils.getDataBanco());
			{trata}			
			return true;
		}
		return false;
	}

	@Override
	public void sair() {
		if (this.abertoPeloMenu) {
			this.detach();
		} else {
			Events.postEvent("onClose", this, this.{obj.nomecompleteuncaptalize});
		}
	}
	{gettersetter}
	{campopesquisar}
	{addbutton}
	{buscaporcodigo}
}